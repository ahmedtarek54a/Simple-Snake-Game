# Import required modules
import turtle
import time
import random
from collections import deque  # for BFS queue
from tkinter import Tk, Label, Button

# Game settings
delay = 0.1
score = 0
high_score = 0
difficulty = {"Easy": 0.15, "Medium": 0.1, "Hard": 0.05}

# Select difficulty level using tkinter
def select_difficulty():
    global delay

    def set_difficulty(choice):
        global delay
        if choice == "Easy":
            delay = difficulty["Easy"]
        elif choice == "Medium":
            delay = difficulty["Medium"]
        elif choice == "Hard":
            delay = difficulty["Hard"]
        root.destroy()

    root = Tk()
    root.title("Select Difficulty")
    root.geometry("300x200")

    Label(root, text="Select Difficulty Level", font=("Arial", 14)).pack(pady=20)
    Button(root, text="Easy", command=lambda: set_difficulty("Easy"), font=("Arial", 12)).pack(pady=5)
    Button(root, text="Medium", command=lambda: set_difficulty("Medium"), font=("Arial", 12)).pack(pady=5)
    Button(root, text="Hard", command=lambda: set_difficulty("Hard"), font=("Arial", 12)).pack(pady=5)

    root.mainloop()

select_difficulty()

wn = turtle.Screen()
wn.title("Snake Game with AI (BFS)")
wn.bgcolor("#A52A2A")
wn.setup(width=600, height=600)
wn.cv._rootwindow.resizable(False, False)
wn.tracer(0)

# Snake head
head = turtle.Turtle()
head.shape("circle")
head.color("Blue")
head.speed(0)
head.penup()
head.goto(0, 0)
head.direction = "Stop"

# Food
food = turtle.Turtle()
food.shape("circle")
food.color("red")
food.penup()
food.speed(0)
food.goto(0, 100)

# Pen for score display
pen = turtle.Turtle()
pen.shape("square")
pen.color("white")
pen.penup()
pen.speed(0)
pen.goto(0, 250)
pen.hideturtle()
pen.write("Score: 0   High Score: 0", align="center", font=("Arial", 24, "bold"))

# Obstacles
obstacles = []
for _ in range(10):  # Add 10 random obstacles
    obstacle = turtle.Turtle()
    obstacle.shape("square")
    obstacle.color("gray")
    obstacle.penup()
    obstacle.speed(0)
    x = random.randint(-14, 14) * 20
    y = random.randint(-14, 14) * 20
    obstacle.goto(x, y)
    obstacles.append(obstacle)

# Segments (body) of the snake
segments = []

# BFS Helper function
def bfs_path(start, goal, blocked):
    """Find the shortest path using BFS."""
    queue = deque([(start, [])])
    visited = set()
    visited.add(start)

    directions = [(0, 20), (0, -20), (20, 0), (-20, 0)]  # up, down, right, left

    while queue:
        (current, path) = queue.popleft()

        if current == goal:
            return path

        for d in directions:
            neighbor = (current[0] + d[0], current[1] + d[1])

            if (
                -300 < neighbor[0] < 300
                and -300 < neighbor[1] < 300
                and neighbor not in blocked
                and neighbor not in visited
            ):
                visited.add(neighbor)
                queue.append((neighbor, path + [d]))

    return []  # No path found

# Update snake direction based on BFS
def update_direction():
    head_pos = (head.xcor(), head.ycor())
    food_pos = (food.xcor(), food.ycor())

    # Get blocked positions (obstacles + snake body)
    blocked_positions = set((seg.xcor(), seg.ycor()) for seg in segments)
    blocked_positions.update((obs.xcor(), obs.ycor()) for obs in obstacles)

    # Get the shortest path using BFS
    path = bfs_path(head_pos, food_pos, blocked_positions)

    if path:
        next_move = path[0]  # Take the first step in the path
        if next_move == (0, 20):  # up
            head.direction = "up"
        elif next_move == (0, -20):  # down
            head.direction = "down"
        elif next_move == (20, 0):  # right
            head.direction = "right"
        elif next_move == (-20, 0):  # left
            head.direction = "left"

# Move the snake
def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)
def game_over():
    global score, segments, delay
    time.sleep(1)
    root = Tk()
    root.title("Game Over")
    root.geometry("300x200")

    Label(root, text="GAME OVER", font=("Arial", 24, "bold"), fg="red").pack(pady=20)
    Label(root, text=f"Your Score: {score}", font=("Arial", 14)).pack(pady=10)

    def restart_game():
        root.destroy()
        head.goto(0, 0)
        head.direction = "Stop"
        for segment in segments:
            segment.goto(1000, 1000)
        segments.clear()
        score = 0
        pen.clear()
        pen.write("Score: 0   High Score: {}".format(high_score), align="center", font=("Arial", 24, "bold"))

    Button(root, text="Restart", command=restart_game, font=("Arial", 12)).pack(pady=10)
    Button(root, text="Exit", command=root.destroy, font=("Arial", 12)).pack(pady=10)

    root.mainloop()

# Main gameplay loop
while True:
    wn.update()

    # Check collision with borders
    if (
        head.xcor() > 290
        or head.xcor() < -290
        or head.ycor() > 290
        or head.ycor() < -290
    ):
        game_over()
        continue

    # Check collision with obstacles
    for obstacle in obstacles:
        if head.distance(obstacle) < 20:
            game_over()
            continue

    # Check collision with food
    if head.distance(food) < 20:
        x = random.randint(-14, 14) * 20
        y = random.randint(-14, 14) * 20
        food.goto(x, y)

        # Add a new segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("orange")
        new_segment.penup()
        segments.append(new_segment)

        delay -= 0.001
        score += 10
        if score > high_score:
            high_score = score
        pen.clear()
        pen.write("Score: {}   High Score: {}".format(score, high_score), align="center", font=("Arial", 24, "bold"))

    # Move the segments
    for index in range(len(segments) - 1, 0, -1):
        x = segments[index - 1].xcor()
        y = segments[index - 1].ycor()
        segments[index].goto(x, y)
    if segments:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    # Update direction using BFS AI
    update_direction()
    move()

    # Check collision with self
    for segment in segments:
        if segment.distance(head) < 20:
            game_over()
            continue

    time.sleep(delay)